/* SPDX-License-Identifier: GPL-2.0 */
/**
 * Copyright (C) 2018 Synopsys, Inc.
 *
 * @file dsih_core.h
 * @brief Synopsys MIPI DSI Host controller library
 * included as a part of Synopsys MIPI DSI Host controller driver.
 *
 * @author Luis Oliveira <luis.oliveira@synopsys.com>
 */
/*
 * Copyright (C) 2024 Synaptics Incorporated
 */

#ifndef __INCLUDES_DSI_H__
#define __INCLUDES_DSI_H__

/** Version supported by this driver */
#define DSI_VERSION_130  0x3133302A
#define DSI_VERSION_131  0x3133312A
#define DSI_VERSION_140  0x3134302A
#define DSI_VERSION_141  0x3134312A

#define DSIH_PIXEL_TOLERANCE	(2)
/* no of tries to access the fifo */
#define DSIH_FIFO_ACTIVE_WAIT	(2000)
#define DSIH_PHY_ACTIVE_WAIT	(50000)
/* a value to start PHY PLL - random */
#define DEFAULT_BYTE_CLOCK	(91000)
#define MAX_NULL_SIZE	(1023)
#define FIFO_DEPTH	(1096)
/* bytes (32bit registers) */
#define WORD_LENGTH	(4)

/*
 * Video stream type
 */
typedef enum {
	VIDEO_NON_BURST_WITH_SYNC_PULSES = 0,
	VIDEO_NON_BURST_WITH_SYNC_EVENTS,
	VIDEO_BURST_WITH_SYNC_PULSES
} dsih_video_mode_t;
/*
 * Color coding type (depth and pixel configuration)
 */
typedef enum {
	COLOR_CODE_16BIT_CONFIG1 = 0,
	COLOR_CODE_16BIT_CONFIG2 = 1,
	COLOR_CODE_16BIT_CONFIG3 = 2,
	COLOR_CODE_18BIT_CONFIG1 = 3,
	COLOR_CODE_18BIT_CONFIG2 = 4,
	COLOR_CODE_24BIT = 5,
	COLOR_CODE_20BIT_YCC422_LOOSELY = 6,
	COLOR_CODE_24BIT_YCC422 = 7,
	COLOR_CODE_16BIT_YCC422 = 8,
	COLOR_CODE_30BIT = 9,
	COLOR_CODE_36BIT = 10,
	COLOR_CODE_12BIT_YCC420 = 11,
	COLOR_CODE_DSC24 = 12,
	COLOR_CODE_MAX
} dsih_color_coding_t;
/**
 * Events generated by the DSI Host controller
 */
typedef enum {
	ACK_SOT_ERR = 0,
	ACK_SOT_SYNC = 1,
	ACK_EOT_SYNC = 2,
	ACK_ESCAPE_CMD_ERR = 3,
	ACK_LP_TX_SYNC_ERR = 4,
	ACK_HS_RX_TIMEOUT_ERR = 5,
	ACK_FALSE_CONTROL_ERR = 6,
	ACK_RSVD_DEVICE_ERR_7 = 7,
	ACK_ECC_SINGLE_BIT_ERR = 8,
	ACK_ECC_MULTI_BIT_ERR = 9,
	ACK_CHECKSUM_ERR = 10,
	ACK_DSI_TYPE_NOT_RECOGNIZED_ERR = 11,
	ACK_VC_ID_INVALID_ERR = 12,
	ACK_INVALID_TX_LENGTH_ERR = 13,
	ACK_RSVD_DEVICE_ERR_14 = 14,
	ACK_DSI_PROTOCOL_ERR = 15,
	DPHY_ESC_ENTRY_ERR = 16,
	DPHY_SYNC_ESC_LP_ERR = 17,
	DPHY_CONTROL_LANE0_ERR = 18,
	DPHY_CONTENTION_LP0_ERR = 19,
	DPHY_CONTENTION_LP1_ERR = 20,
	/* start of st1 */
	HS_CONTENTION = 21,
	LP_CONTENTION = 22,
	RX_ECC_SINGLE_ERR = 23,
	RX_ECC_MULTI_ERR = 24,
	RX_CRC_ERR = 25,
	RX_PKT_SIZE_ERR = 26,
	RX_EOTP_ERR = 27,
	DPI_PLD_FIFO_FULL_ERR = 28,
	GEN_TX_CMD_FIFO_FULL_ERR = 29,
	GEN_TX_PLD_FIFO_FULL_ERR = 30,
	GEN_TX_PLD_FIFO_EMPTY_ERR = 31,
	GEN_RX_PLD_FIFO_EMPTY_ERR = 32,
	GEN_RX_PLD_FIFO_FULL_ERR = 33,
	DBI_TX_CMD_FIFO_FULL_ERR = 34,
	DBI_TX_PLD_FIFO_FULL_ERR = 35,
	DBI_RX_PLD_FIFO_EMPTY_ERR = 36,
	DBI_RX_PLD_FIFO_FULL_ERR = 37,
	DBI_ILLEGAL_CMD_ERR = 38,
	DSI_MAX_EVENT = 39
} dsih_event_t;

typedef enum
{
	VIDEO_MODE = 0,
	COMMAND_MODE = 1
}dsih_mode_t;

/**
 * Register configurations
 */
typedef struct {
	/** Register offset */
	uint32_t addr;
	/** Register data [in or out] */
	uint32_t data;
} register_config_t;

/**
 * DSI platform init parameters
 * Holds the values necessary for starting the DSI platform
 */
typedef struct dsi_basic_config_t {
	/** Number of lanes */
	uint8_t lanes;
	/** Screen type */
	uint8_t screen;
	/*Video Mode or command mode */
	int video_mode;
} dsi_basic_config_t;

/**
 * DCS Write struct
 */
typedef struct cmd_write_t {
	/** Virtual channel */
	uint8_t vc;
	/** buffer */
	uint8_t cmd_buffer[64];
	/*length of buffer */
	uint16_t length;
	/*packet type *///Only for packet
	uint8_t data_type;
} cmd_write_t;

/**
 * DCS Write struct
 */
typedef struct cmd_read_t {
	/** Virtual channel */
	uint8_t vc;
	/** buffer */
	uint8_t cmd_buffer[64];
	/*Bytes to be read */
	int bytes_to_read;
	/*Command */
	int command;
	/*length */
	int length;
	/** read bytes */
	uint8_t read_bytes;
	/** param *///Only for packet
	uint8_t param[2];
} cmd_read_t;

/**
 * Tear struct
 */
typedef struct tear_t {
	/** Virtual channel */
	uint8_t vc;
	/** status */
	uint8_t status;
} tear_t;

/**
 * PreSP struct
 */
typedef struct presp_t {
	/** Virtual channel */
	uint8_t type;
	/** status */
	uint8_t time;
} presp_t;

/**
 * MIPI D-PHY
 * Holds the mapping of API to the OS, logging I/O, and hardware access layer
 * and HW module information.
 */
typedef struct dphy_t {
	/**Number of lanes*/
	uint8_t lanes;
	/**output freq*/
	uint32_t output_freq;
	/** Reference frequency provided to PHY module [KHz] - REQUIRED */
	uint32_t reference_freq;
	/* Is this DPHY G118?*/
	unsigned int is_g118;
	/*DPHY wrapper base address*/
	unsigned int base;
	/*Handle for VPP_OBJ */
	void *pHandle;

} dphy_t;

typedef struct MIPI_DSI_CMD_PARAMS_T {
	uint16_t bufsize;
	uint8_t* pcmd;
}DSI_CMD_T;

/**
 * Video configurations
 * Holds information about the video stream to be sent through the DPI interface.
 */
typedef struct {
	/** Number of lanes used to send current video */
	uint8_t no_of_lanes;
	/** Virtual channel number to send this video stream */
	uint8_t virtual_channel;
	/** Video mode, whether burst with sync pulses, or packets with either sync pulses or events */
	dsih_video_mode_t video_mode;
	/** Maximum number of byte clock cycles needed by the PHY to transition
	 * the data lanes from high speed to low power - REQUIRED */
	uint16_t max_hs_to_lp_cycles;
	/** Maximum number of byte clock cycles needed by the PHY to transition
	 * the data lanes from low power to high speed - REQUIRED */
	uint16_t max_lp_to_hs_cycles;
	/** Maximum number of byte clock cycles needed by the PHY to transition
	 * the clock lane from high speed to low power - REQUIRED */
	uint16_t max_clk_hs_to_lp_cycles;
	/** Maximum number of byte clock cycles needed by the PHY to transition
	 * the clock lane from low power to high speed - REQUIRED */
	uint16_t max_clk_lp_to_hs_cycles;
	/** Enable non coninuous clock for energy saving
	 * - Clock lane will go to LS while not transmitting video */
	int non_continuous_clock;
	/** Enable receiving of ack packets */
	int receive_ack_packets;
	/** Byte (lane) clock [KHz] */
	unsigned long byte_clock;
	/** Pixel (DPI) Clock [KHz]*/
	unsigned long pixel_clock;
	/** Colour coding - BPP and Pixel configuration */
	dsih_color_coding_t color_coding;
	/** Is 18-bit loosely packets (valid only when BPP == 18) */
	int is_18_loosely;
	/** Data enable signal (dpidaten) whether it is active high or low */
	int data_en_polarity;
	/** Horizontal synchronisation signal (dpihsync) whether it is active high or low */
	int h_polarity;
	/** Horizontal resolution or Active Pixels */
	uint16_t h_active_pixels;	/* hadr */
	/** Horizontal Sync Pixels - min 4 for best performance */
	uint16_t h_sync_pixels;
	/** Horizontal back porch pixels */
	uint16_t h_back_porch_pixels;	/* hbp */
	/** Total Horizontal pixels */
	uint16_t h_total_pixels;	/* h_total */
	/** Vertical synchronisation signal (dpivsync) whether it is active high or low */
	int v_polarity;
	/** Vertical active lines (resolution) */
	uint16_t v_active_lines;	/* vadr */
	/** Vertical sync lines */
	uint16_t v_sync_lines;
	/** Vertical back porch lines */
	uint16_t v_back_porch_lines;	/* vbp */
	/** Total no of vertical lines */
	uint16_t v_total_lines;	/* v_total */
	/** When set to 1, this bit enables the EoTp reception */
	int eotp_rx_en;
	/** When set to 1, this bit enables the EoTp transmission */
	int eotp_tx_en;
	/** This register configures the number of chunks to use */
	int no_of_chunks;
	/** This register configures the size of null packets */
	uint16_t null_packet_size;
	/** */
	int dpi_lp_cmd_en;
	/** Diplay type*/
	int display_type;

	uint16_t hline;

	/*Commands for Panel init*/
	DSI_CMD_T DsiPanelcmd;

} dsih_dpi_video_t;

typedef struct {
	/** Number of lanes used to send current video */
	uint8_t no_of_lanes;
	/** virtual channel */
	uint8_t virtual_channel;
	/** Commands to be sent in high speed or low power */
	int lp;
	/** Colour coding - BPP and Pixel configuration */
	dsih_color_coding_t color_coding;
	/** Top horizontal pixel position in the display */
	uint16_t h_start;
	/** Horizontal resolution or Active Pixels */
	uint16_t h_active_pixels;	/* hadr */
	/** Left most line position in the display */
	uint16_t v_start;
	/** Vertical active lines (resolution) */
	uint16_t v_active_lines;	/* vadr */
	/** Whether Tearing effect should be requested */
	int te;
	/** bta enable*/
	int bta;
	/** packet size of write memory command -
	 * 0 is default (optimum usage of RAM) */
	uint16_t packet_size;
	/** Byte (lane) clock [KHz] */
	uint32_t byte_clock;
	/** Pixel (DPI) Clock [KHz]*/
	unsigned long pixel_clock;
	/** Send setup packets */
	uint16_t send_setup_packets;
	/** Diplay type*/
	int display_type;

} dsih_cmd_mode_video_t;

#endif
